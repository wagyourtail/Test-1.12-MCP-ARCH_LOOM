plugins {
    id 'dev.architectury.loom' version '0.10.0.9999'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

// when using loom 0.10.0 with minecraft 1.16,
// be sure to set this (and other references to Java 16)
// to Java 8, obviously
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    setIntermediaryUrl('https://maven.legacyfabric.net/net/fabricmc/intermediary/%1$s/intermediary-%1$s-v2.jar')
    generateSrgTiny = true
    forge {

        // missing access transformers?
        // don't worry, you can still use them!
        // note that your AT *MUST* be located at
        // src/main/resources/META-INF/accesstransformer.cfg
        // to work as there is currently no config option to change this.
        // also, any names used in your access transformer will need to be
        // in SRG mapped ("func_" / "field_" with MCP class names) to work!
        // (both of these things may be subject to change in the future)

        // this will create a data generator configuration
        // that you can use to automatically generate assets and data
        // using architectury loom. Note that this currently *only* works
        // for forge projects made with architectury loom!
        dataGen {
            mod project.mod_id
        }
    }

    // This allows you to modify your launch configurations,
    // for example to add custom arguments. In this case, we want
    // the data generator to check our resources directory for
    // existing files. (see Forge's ExistingFileHelper for more info)
    launches {
        client {
            property "fml.coreMods.load", "com.example.examplemod.MixinLoader"
        }
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

repositories {
    maven {
        url "https://maven.minecraftforge.net/maven/"
        metadataSources {
            artifact()
        }
    }
    maven {
        url "https://files.minecraftforge.net/maven/"
        metadataSources {
            artifact()
        }
    }
    maven { url 'https://repo.spongepowered.org/maven' }
//    maven {
//        name = "legacy-fabric"
//        url = "https://maven.legacyfabric.net"
//    }
}

dependencies {
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings "de.oceanlabs.mcp:mcp_${project.mcp_channel}:${project.mcp_version}@zip"

    implementation 'org.spongepowered:mixin:0.7.11-SNAPSHOT'

    shadow 'org.spongepowered:mixin:0.7.11-SNAPSHOT'
//    mappings "net.fabricmc:yarn:1.8.9+build.202110221052:v2"

    // additional dependencies can be specified using loom's regular format
    // specifying a "mod" dependency (like modImplementation or modApi)
    // will cause loom to remap the file to your specified mappings

    // in this example, we'll be adding JEI as a dependency
    // according to their developer example on GitHub
    // see: https://github.com/mezz/JustEnoughItems/wiki/Getting-Started
    // compile against the JEI API but do not include it at runtime
    // don't worry about loom "not finding a forge mod" here,
}

processResources {
    // define properties that can be used during resource processing
    inputs.property "version", project.version

    // this will replace the property "${version}" in your mods.toml
    // with the version you've defined in your gradle.properties
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"
    // when using 1.17, this should be 16
    // when using 1.16, this should be 8
    options.release = 8
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                "FMLCorePlugin": "com.example.examplemod.MixinLoader",
                "FMLCorePluginContainsFMLMod": true,
                "ForceLoadAsMod": true
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
